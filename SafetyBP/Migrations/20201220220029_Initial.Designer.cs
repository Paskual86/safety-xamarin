// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SafetyBP.Persistance;

namespace SafetyBP.Migrations
{
    [DbContext(typeof(SafetyContext))]
    [Migration("20201220220029_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("SafetyBP.Domain.Entities.OffLineRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Request")
                        .HasColumnType("TEXT")
                        .HasMaxLength(5000);

                    b.Property<int>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OffLineRequest");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyCheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PendingToSynchronize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("ModuleChecklists");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyCheckListDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPendingToSyncronize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.ToTable("ModuleChecklistsDetails");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyCheckListQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DoesNotApply")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAlert")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCritica")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPendingToSyncronize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhotoRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelatedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.ToTable("ModuleChecklistsQuestions");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyNegativeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<int>("ValueType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ModuleChecklistsQuestionsNegativeValues");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetySector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetySpontaneousDiversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasMaxLength(2000);

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT")
                        .HasMaxLength(2000);

                    b.Property<int>("Risk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Synchronized")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("SpontaneousDiversion");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PendingToSynchronize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyTaskAdditionalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("SafetyTaskAdditionalData");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyTaskCheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPendingToSync")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaskDetailId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskDetailId");

                    b.ToTable("TaskDetailsCheckList");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyTaskDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT")
                        .HasMaxLength(2048);

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Files")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.Property<byte>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskDetails");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyCheckListDetail", b =>
                {
                    b.HasOne("SafetyBP.Domain.Models.SafetyCheckList", "CheckList")
                        .WithMany("Details")
                        .HasForeignKey("CheckListId");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyCheckListQuestion", b =>
                {
                    b.HasOne("SafetyBP.Domain.Models.SafetyCheckListDetail", "CheckList")
                        .WithMany("Questions")
                        .HasForeignKey("CheckListId");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyNegativeValue", b =>
                {
                    b.HasOne("SafetyBP.Domain.Models.SafetyCheckListQuestion", "Question")
                        .WithMany("NegativeValues")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetySpontaneousDiversion", b =>
                {
                    b.HasOne("SafetyBP.Domain.Models.SafetySector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyTaskAdditionalData", b =>
                {
                    b.HasOne("SafetyBP.Domain.Models.SafetyTask", "Task")
                        .WithOne("AdditionalData")
                        .HasForeignKey("SafetyBP.Domain.Models.SafetyTaskAdditionalData", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyTaskCheckList", b =>
                {
                    b.HasOne("SafetyBP.Domain.Models.SafetyTaskDetails", "TaskDetail")
                        .WithMany("CheckList")
                        .HasForeignKey("TaskDetailId");
                });

            modelBuilder.Entity("SafetyBP.Domain.Models.SafetyTaskDetails", b =>
                {
                    b.HasOne("SafetyBP.Domain.Models.SafetyTask", "Task")
                        .WithMany("Details")
                        .HasForeignKey("TaskId");
                });
#pragma warning restore 612, 618
        }
    }
}
